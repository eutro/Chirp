Program ::= ( Statement ( (','|'\n') Statement )* )?

Statement ::= Defn | Expr | TypeDefn

Defn ::= 'defn' Binding

TypeDefn ::= 'type' TypeParams? Identifier ( '=' Type ) | '(' ( TypeClause (',' TypeClause)* ','? )? ')'

TypeClause ::= ( Identifier ':' )? Type

Binding ::= Identifier Params? TypeHint? '=' ( Expr | TForeign )

Params ::= TypeParams? ( '(' ( RawBinding ( ',' RawBinding )* )? ')' )

TypeParams ::= '<' Identifier ( ',' Identifier )* ','> '>'

RawBinding ::= Identifier TypeHint?

Identifier ::= TIdent

TypeHint ::= ':' Type

Type ::= UnionType

UnionType ::= AtomType ( '|' AtomType )*

AtomType ::= PlaceholderType | NamedType | TupleType | TypeDefn | '(' Type ')'

PlaceholderType ::= '_'

NamedType ::= Identifier ( '<' Type ( ',' Type )* ','? '>' )?

TupleType ::= '#(' ( Type ( ',' Type )* ','? )? ')'

Expr ::= LogCmpExpr

LogCmpExpr ::= CmpExpr ( ('&&' | '||') CmpExpr )*

CmpExpr ::= BitExpr ( ('<'|'<='|'>'|'>='|'!='|'==') BitExpr )*

BitExpr ::= AddExpr ( ('|' | '&') AddExpr )*

AddExpr ::= MulExpr ( ('+'|'-') MulExpr )*

MulExpr ::= HintedExpr ( ('*'|'/'|'%') HintedExpr )*

HintedExpr ::= PrefixExpr TypeHint?

PrefixExpr ::= ('+'|'-')* PostfixExpr

PostfixExpr ::= PrimaryExpr ( '(' ( Expr ( ',' Expr )* ','? )? ')' )*

PrimaryExpr ::= VarExpr | LiteralExpr | DelimitedExpr | IfExpr | LetExpr | FnExpr | LambdaExpr

VarExpr ::= Identifier

LiteralExpr ::= TStr | TInt | TFloat | TTrue | TFalse

DelimitedExpr ::= BlockExpr | BracketExpr | ColonExpr

BlockExpr ::= '{' ( ( Statement (','|'\n') )* Expr )? '}'

BracketExpr ::= '(' Expr ')'

ColonExpr ::= ':' Expr

IfExpr ::= 'if' Expr BlockExpr
           ( 'else' 'if' Expr ( 'then' Expr | BlockExpr ) )*
           ( 'else' Expr )?

LetExpr ::= 'let' ( Binding ( (','|'\n') Binding )* ','? )? 'in' Identifier? DelimitedExpr

FnExpr ::= 'fn' Identifier? Params TypeHint? '=' Expr

LambdaExpr ::= TBackslash ( Identifier ( ',' Identifier )* )? '.' Expr
