Program ::= Statement*

Statement ::= Defn | Expr

Defn ::= 'defn' Binding

Binding ::= Identifier ( '(' ( RawBinding ( ',' RawBinding )? )? ')' )? TypeHint? '=' Expr

RawBinding ::= Identifier TypeHint?

Identifier ::= TIdent

TypeHint ::= ':' Type

Type ::= PlaceholderType | NamedType

PlaceholderType ::= '_'

NamedType ::= Identifier ( '<' Type ( ',' Type )* ','? '>' )?

Expr ::= LogCmpExpr

DelimitedExpr ::= BlockExpr | BracketExpr

BlockExpr ::= '{' ( Statement (','|'\n') )* Expr '}'

LogCmpExpr ::= EqExpr ( ('&&' | '||') EqExpr )*

EqExpr ::= CmpExpr ( ('!='|'='|'==') CmpExpr )*

CmpExpr ::= BitExpr ( ('<'|'<='|'>'|'>=') BitExpr )*

BitExpr ::= ShiftExpr ( ('|' | '&') ShiftExpr )*

ShiftExpr ::= AddExpr ( ('<<'|'>>') AddExpr )*

AddExpr ::= MulExpr ( ('+'|'-') MulExpr )*

MulExpr ::= HintedExpr ( ('*'|'/'|'%') HintedExpr )*

HintedExpr ::= PrefixExpr TypeHint?

PrefixExpr ::= ('+'|'-')* PostfixExpr

PostfixExpr ::= PrimaryExpr | FunCalLExpr

FunCallExpr ::= PrimaryExpr ( '(' ( Expr ( ',' Expr )* ','? )? ')' )

PrimaryExpr ::= VarExpr | LiteralExpr | DelimitedExpr | IfExpr | LetExpr

IfExpr ::= 'if' Expr DelimitedExpr
           ( 'else' 'if' Expr DelimitedExpr )*
           ( 'else' DelimitedExpr )?

LetExpr ::= 'let' ( Binding ( ',' Binding )* ','? )? 'in' Identifier? DelimitedExpr

VarExpr ::= Identifier

BracketExpr ::= '(' Expr ')'

LiteralExpr ::= TStr | TInt | TFloat
