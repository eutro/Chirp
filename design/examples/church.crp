defn zero(f) =
 let zero(x) = x in { zero }

defn one(f) =
 let one(x) = f(x) in { one }

defn two(f) =
 let two(x) = f(f(x)) in { two }

defn three(f) =
 let three(x) = f(f(f(x))) in { three }

defn add(a, b) =
 let sum(f) =
  let added(x) = (a(f))((b(f))(x)) in {added}
   in {sum}
  

defn mul(a, b) =
 let prod(f) =
  let multiplied(x) = (a(b(f)))(x) in {multiplied}
   in {prod}

defn pow(a, b) =
 let pow(f) =
  let exp(x) = ((a(b))(f))(x) in {exp}
   in {pow}
