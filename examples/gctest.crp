// file for pressure testing GC

defn chirpGc(x: i64): #() = foreign
defn putS(s: string): #() = foreign

defn test = (λcapture,dropSecond.{ // ensure they aren't globals
  defn testfn() =
    putS(
      dropSecond(
        capture("Hello!\n"),
        {
          chirpGc(1)
          capture("")
        }
      )()
    )
  testfn
})(
  let capture(x) = λ.x in: capture,
  (λ.{
    /// true, but taken from FFI so the optimiser doesn't inline
    /// #include <stdbool.h>
    /// bool ffiTrue() { return true; }
    defn ffiTrue(): bool = foreign
    defn dropSecond(x, y) = if ffiTrue() { x } else { y }
    dropSecond
  })()
)

test()
chirpGc(1) // free the temporaries from before
test()
chirpGc(1) // test if the garbage collector has broken its own state
